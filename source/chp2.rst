.. part1index:

**表面层次的改进**

我们可读性游览的开始，是我们认为的那些“表面层次”的改进：挑选好的名字，编写好的注释，和代码格式整洁。这些类型的改变易于应用。你可以“就地”完成它们，而不需要重构你的代码或改变你的程序的运行。你可以增量的完成它们，而不需要大块的时间投入。

这些主题非常重要， **因为它们影响你的代码库中的每一行代码。** 虽然每一个改变看起来很小，但聚集起来，它们会对一个代码库作出巨大的改进。如果你的代码有很好的名字，好的注释，和干净的使用空白，你的代码就会更容易阅读。

当然，表面层次变得易读（在本书的后续章节中，我们将讨论到）会带来很多好处。但在这部分的材料是如此广泛适用的，因此付出一点努力，首先讨论它是值得的。

.. chp2index:

包装信息到名字
=================

.. figure:: _static/2.*
   :align: center

无论你命名一个变量，函数，或类，有很多原则可以使用。我们喜欢把名字认为是一个微笑的注释。即使没有太多的空间(room)，选择一个好的名字，可以传达大量的信息。

.. ttip::

   **KEY IDEA**

   **包装信息到你的名字**

我们在程序里看见了大量的名字都是含糊的，例如 `tmp` 。即使单词看起来可能是合理的，例如 `size` 或 `get` ，并没有包装许多信息。本章将告诉你如何选择名字。

本章安排了六个特定的主题： 

 * 选择特定的词
 * 避免使用通用的名字（或知道什么时候使用它们）
 * 使用具体的名字代替抽象的名字
 * 决定名字有多长
 * 使用名字格式化来包装额外的信息

选择特定的词
------------------

“包装信息到名字”的要素是选择一个特定的词，并避免“空的”词。

例如，"get"这个词不是非常特定，在这个例子中： 

  .. code-block:: python

    def GetPage(url):
        ...

"get"这个词确实没有说什么。这个方法是从本地缓存，从一个数据库，或从网络得到一页吗？如果它从网络，一个更特定的名字，应该是 `FetchPage()` 或 `DownloadPage()` 。

这里是一个关于 `BinaryTree` 类的例子： 

  ::

    class BinaryTree {
        int Size();
        ...
    };

你期望的 `Size()` 方法的返回值是什么？树的高度，节点的数目，还是树的足迹内存？

问题是 `Size()` 方法并没有传达太多的信息。一个更特定的名字应该是 `Hight()` ,`NumNodes()` 或 `MemoryBytes()` 。

另外一个例子，假如你有某种形式的 `Thread` 类： 

  ::

   class Thread {
       void Stop();
       ...
   };

这个 `Stop()` 的名字是可以的，但这取决于它确切的干了什么，这应该有一个更特定的名字。例如，你可以叫它 `Kill()` ，如果它是一个重量级的不可以被撤销的操作。或你应该叫它 `Pause()` ，如果有一个方法来 `Resume()` 它。

找到更“富有色彩”词
+++++++++++++++++++++

\

.. figure:: _static/2-1.*
   :align: center

不要害怕使用专业词典或向朋友询问一个更好名字的的建议。英语是一个丰富的语言，并有很多词从中选择。

这里有一些关于一个词，以及它的一些“富有色彩”的版本，可能会使用你的情形：

.. list-table::
   :widths: 10, 30
   :header-rows: 1

   * - Word
     - Alternatives
   * - send
     - deliver, dispatch, announce, distribute, route
   * - find
     - search, extract, locate, recover
   * - start
     - launch, create, begin, open
   * - make
     - create, set up, build, generate, compose, add, new

但是，不要得意忘形。在PHP中，有一个函数 `explode()` 一个字符窜。这是一个富有色彩的名字，它描绘了一个把一些东西打成碎片的好的图案，但是，它和 `split()` 有多大的区别呢？（这两个函数不不同的，但是，基于它们的名字很难猜测出它们的不同。）

.. ttip::

   **KEY IDEA**
   **是明确的和精确的比是可爱的更好。**


避免像 `tmp` 和 `retval` 这样通用的名字
------------------------------------------
